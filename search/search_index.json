{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#acoupi_batdetect2","title":"acoupi_batdetect2","text":""},{"location":"#what_is_acoupi_batdetect2","title":"What is acoupi_batdetect2?","text":"<p>acoupi_batdetect2 is an open-source Python package that implement the BatDetect2 bioacoustic deep-learning model on edge devices like the RaspberryPi using the acoupi framework. The BatDetect2 DL model has been developed by Oisin M.A., et al. to detect and classify UK bats species. </p> <p>What is the difference between acoupi and acoupi_batdetect2?</p> <p>acoupi_batdetect2 and acoupi are different. The acoupi_batdetect2 program is built on top of the acoupi python package. Think of acoupi like a bag of LEGO pieces that you can assemble into multiple shapes and forms. acoupi_batdectect2 would be the results of assembling some of these LEGO pieces into a \"bat\"!</p> Get familiar with acoupi <p>acoupi_batdetect2 builds on and inherits features from acoupi. If you want to learn more the acoupi framework, we recommand starting with acoupi's home documentation. </p>"},{"location":"#requirements","title":"Requirements","text":"<p>acoupi_batdetect2 is designed to run on single-board computers like the Raspberry\u00a0Pi. It can be installed and tested on any Linux-based machines with Python version &gt;=3.8,&lt;3.12.</p> <ul> <li>A Linux-based single-board computer such as the Raspberry Pi 4B.</li> <li>A SD Card with the 64-bit Lite OS version installed.</li> <li>An ultrasonic USB Microphone, such as an AudioMoth\u00a0USB\u00a0Microphone or an Ultramic 192K/250K.</li> </ul> Recommended Hardware <p>The software has been extensively developed and tested with the RPi 4B. We advise users to select the RPi 4B or a device featuring similar specifications.</p>"},{"location":"#installation","title":"Installation","text":"<p>To install acoupi_batdetect2 on your embedded device, you will need to first have acoupi installed on your device. Follow these steps to install both acoupi and acoupi_batdetect2:</p> <p>Step1: Install acoupi and its dependencies</p> <pre><code>curl -sSL https://github.com/acoupi/acoupi/raw/main/scripts/setup.sh | bash\n</code></pre> <p>Step2: Install acoupi_batdetect2 and its dependencies</p> <pre><code>pip install acoupi_batdetect2\n</code></pre> <p>Step 3: Configure the acoupi_batdetect2 program.</p> <pre><code>acoupi setup --program acoupi_batdetect2.program\n</code></pre> <p>Step 4: Start the acoupi_batdetect2 program.</p> <pre><code>acoupi deployment start\n</code></pre> Using acoupi_batdetect2 from the command line <p>To check what are the available commands for acoupi_batdetect2, enter <code>acoupi --help</code>. For more details about each of the commands, refer to the acoupi CLI documentation for further info.</p>"},{"location":"#what_is_acoupi","title":"What is acoupi? \ud83d\ude80","text":"<p>acoupi is an open-source Python package that simplifies the use and implementation of bioacoustic classifiers on edge devices.  It integrates and standardises the entire bioacoustic monitoring workflow, facilitating the creation of custom sensors, by handling audio recordings, processing, classifications, detections, communication, and data management.</p> <p>Licenses and Usage</p> <p>acoupi_batdetect2 can not be used for commercial purposes.</p> <p>The acoupi_batdetect2 program inherits the BatDetect2 model license, published under the Creative Commons Attribution-NonCommercial 4.0 International. Please make sure to review this license to ensure your intended use complies with its terms.</p> <p>Model Output Reliability</p> <p>Please note that acoupi_batdetect2 program is not responsible for the accuracy or reliability of predictions made by the BatDetect2 model. It is essential to understand the model's performance and limitations before using it in your project.</p> <p>For more details on the BatDetect2 model architecture, as well as its precision and recall, refer to the publication Mac Aodha O., et al., (2002) Towards a General Approach for Bat Echolocation Detection and Classification.</p> <p>Available acoupi programs!</p> <p>acoupi offers various programs that can be configured to meet your needs. These programs can be used to simply record audio, send messages, or even detect and classify birds species. Check out the full list of available acoupi programs to learn more. </p>"},{"location":"#next_steps","title":"Next steps \ud83d\udcd6","text":"<p>Get to know acoupi better by exploring this documentation.</p> Tutorials <p>Step-by-step information on how to install, configure and deploy acoupi_batdetect2 for new users.</p> Explanation <p>Learn more about the building blocks constituing acoupi_batdetect2 program.</p> Reference <p>Technical information refering to acoupi_batdetect2 code.</p> <p>Important</p> <p>We would love to hear your feedback about the documentation. We are always looking to hearing suggestions to improve readability and user's ease of navigation. Don't hesitate to reach out if you have comments!</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#faq","title":"FAQ","text":""},{"location":"faq/#what_is_acoupi-batdetect2","title":"What is acoupi-batdetect2?","text":"<p>acoupi-batdetect2 is the implementation of the AI Bioacoustic Classifier BatDetect2 using acoupi Python toolkit. </p>"},{"location":"faq/#what_is_batdetect2","title":"What is BatDetect2?","text":"<p>BatDetect2 is a deep-learning model to detect and classify bat echolocation calls in high frequency audio recordings. </p> <p>The model was developed by Santiago Martinez Balvanera (@mbsantiago) and Oisin Mac Adoha (@macaodha). </p>"},{"location":"faq/#can_the_batdetect2_model_classify_any_bat_species","title":"Can the BatDetect2 model classify any bat species?","text":"<p>No, the BatDetect2 model was developed for UK bat species. When using the model to classifiy bat species not found in the UK, you will most probably get misclassification. </p>"},{"location":"faq/#for_who_is_acoupi_batdetect2","title":"For who is acoupi_batdetect2?","text":"<p>acoupi_batdetect2 is itended for researchers, practioners, and individuals interested in recording and classifying UK bat species. </p>"},{"location":"faq/#can_i_configure_acoupi_batdetect2","title":"Can I configure acoupi_batdetect2?","text":"<p>Yes. Users can customised the configuration parameters of acoupi-batdetect2 to suit their own needs. See tutorials/configuration to learn more about the configuration options.</p>"},{"location":"faq/#what_are_the_requirements_to_use_acoupi_batdetect2","title":"What are the requirements to use acoupi_batdetect2?","text":"<p>To use acoupi-batdetect2 you will need the following hardware:</p> <ul> <li>a Raspberry Pi 4</li> <li>an SD Card (32GB or 64GB) with RaspbiOS-Arm64-Lite installed. </li> <li>a USB microphone being able to record high-frequencies such as the AudioMoth or the Ultramic from Dodotronic. </li> </ul>"},{"location":"faq/#where_can_i_found_more_information_about_batdetect2","title":"Where can I found more information about BatDetect2?","text":"<ol> <li> <p>The BatDetect2 GitHub repository contains a lot of information about the model. You may also want to check the PyPi documentation. </p> </li> <li> <p>The research article \"Towards a Genera Approach for Bat Echolocation Detection and Classification\" (Mac Aodha et al. 2022) is also a great resource to learn more about the architecture and performance of the model. </p> </li> </ol>"},{"location":"explanation/","title":"Explanation","text":""},{"location":"explanation/#explanation","title":"Explanation","text":"<p>Welcome to the Explanation Section of acoupi_batdetect2 package.</p> <p>This section of the documentation is intended for users who wish to better understand the inner-workings of acoupi_batdetect2 program.</p> <p>Learn about acoupi LEGO blocks!</p> <p>If you are interested in learning move about the different building blocks forming the acoupi framework, please refer to the Explanation Section of acoupi documentation.  </p> <p>acoupi Reference</p> <p>Take a look at the Reference section of the documentation to get insights into the python code and learn about the parameters and options available to customise acoupi.</p>"},{"location":"explanation/batdetect2_program/","title":"Batdetect2 Program","text":""},{"location":"explanation/batdetect2_program/#batdetect2_program","title":"Batdetect2 Program","text":"<p>The BatDetect2 Program has been designed to record, detect and classify, as well as manage and send messages of UK bat calls. The program extends the <code>DetectionProgram</code> and <code>MessagingProgram</code> from the acoupi package by adding the BatDetect2 model and integrating users' custom configuration schema.</p>"},{"location":"explanation/batdetect2_program/#key_elements","title":"Key Elements","text":""},{"location":"explanation/batdetect2_program/#batdetect2_configschema","title":"BatDetect2_ConfigSchema","text":"<p>Defines the configuration for the BatDetect2 program, including the audio recording, model setup, file management, messaging, and summariser settings.</p>"},{"location":"explanation/batdetect2_program/#program_tasks","title":"Program Tasks","text":""},{"location":"explanation/batdetect2_program/#recording","title":"Recording","text":"<p>Records audio from a microphone and saves the audio files in a temporary directory until they have been processed by the <code>detection</code>  and <code>management</code> tasks. Based on the <code>SavingFilters</code> configuration, recordings  will either saved or deleted.</p>"},{"location":"explanation/batdetect2_program/#detection","title":"Detection","text":"<p>Runs the BatDetect2 model on the audio recordings, processes the detections, and can use a custom <code>ModelOutputCleaner</code> to filter out unwanted detections (e.g., low-confidence results). The filtered detections are saved in a <code>metadata.db</code> file. </p>"},{"location":"explanation/batdetect2_program/#management","title":"Management","text":"<p>Performs periodically file management operations,  such as moving recording to permanent storage, or deleting unnecessary ones.</p>"},{"location":"explanation/batdetect2_program/#messaging","title":"Messaging","text":"<p>Send messages stored in the message store using a configured protocol (HTTP or MQTT). </p>"},{"location":"explanation/batdetect2_program/#summary","title":"Summary","text":"<p>Periodically creates summaries of the detections. </p>"},{"location":"explanation/batdetect2_program/#customisation_options","title":"Customisation Options","text":""},{"location":"explanation/batdetect2_program/#model_config","title":"Model Config","text":"<p>Set the <code>detection_threshold</code> to clean out the output of the  BatDetect2 model. Detections with a confidence score below this threshold  will be excluded from the store and from the message content.</p>"},{"location":"explanation/batdetect2_program/#saving_config","title":"Saving Config","text":"<p>Define where recordings are stored, the naming format, and  the minimum confidence score for saving recordings. Recordings with confidence  scores below the <code>saving_threshold</code> will not be saved. The <code>saving_threshold</code>  can be set lower than the <code>detection_threshold</code> to save recordings with uncertain detections. Recordings with detections above the <code>bat_threshold</code> will be  saved in the <code>true_dir</code> directory, while recordings with detections below  the <code>bat_threshold</code> but above the <code>saving_threshold</code> will be saved in  the <code>false_dir</code> directory. </p>"},{"location":"explanation/batdetect2_program/#savingfilters_config","title":"SavingFilters Config","text":"<p>Define additional saving filters for saving recordings. </p> <ul> <li>A timeinterval interval fitler that saves recordings within a specific time window, set by the <code>starttime</code> and <code>endtime</code> parameters. </li> <li>A frequency filter that saves recordings for a specific duration (in minutes) at defined interval (in minutes), set by the <code>frequency_duration</code> and <code>frequency_interval</code> parameters.</li> <li>A before dawn/dusk filter to save recording for a defined duration (in minutes) before dawn and dusk, set by the <code>before_dawndusk_duration</code>.</li> <li>An after dawn/dusk filter to save recording for a defined duration (in minutes) after dawn and dusk, set by the <code>after_dawndusk_duration</code>.</li> <li>A saving threshold filter that saves recordings based on the confidence score of the detections from the model, set by the <code>saving_filter</code> parameter.</li> </ul>"},{"location":"explanation/batdetect2_program/#summariserconfig","title":"SummariserConfig","text":"<p>Define the interval for summarising detections.  By default, the summariser calculates the minimum, maximum, and average  confidence scores of the total number of detections for each time interval.  If the <code>low_band_threshold</code>, <code>mid_band_threshold</code>, and <code>high_band_threshold</code> are  set to values greater than 0.0, it also summarises the number of detections in  each band (low, mid, high).</p>"},{"location":"reference/","title":"Technical Reference","text":""},{"location":"reference/#technical_reference","title":"Technical Reference","text":"<p>The technical reference section of acoupi_batdetect2 provides detailed information a on the three essential elements that define the program: the configuration schema, the model,  and the program itself.</p> <ul> <li> <p>Configuration: The configuration schema defines the structure and data types of each configuration variable. It allows users to customise how the acoupi_batdetect2 program runs and executes. </p> </li> <li> <p>Model: The model is the core of the acoupi_batdetect2 program. It handles how the <code>BatDetect2</code> model is loaded, how it processes recordings, retrieves detections, and formats the results into a usable format for the subsequent tasks in the program.</p> </li> <li> <p>Program: The program class encapsulates all essential elements, enabling successful execution on a device. It leverages pre-defined acoupi templates to facilitate the organisation and configuration of the specific tasks and compoments. </p> </li> </ul> <p>Learn more about program tasks and compoments:</p> <p>The elements of the acoupi_batdetect2 program build and inherit from acoupi package. For detailed information on each module, class, and method, refer to the acoupi documentation's reference section.</p> Configuration <p>The blueprint for customising the _acoupi_batdetect2_ program.</p> Model <p>Configuring the BatDetect2 model to process recordings.</p> Program <p>Complete unit adapting to users configurations.</p>"},{"location":"reference/configuration/","title":"Configuration","text":""},{"location":"reference/configuration/#configuration","title":"Configuration","text":""},{"location":"reference/configuration/#program_configuration","title":"Program Configuration","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration","title":"<code>acoupi_batdetect2.configuration</code>","text":"<p>Batdetect2 Program Configuration Options.</p> <p>Classes:</p> Name Description <code>BatDetect2_AudioConfig</code> <p>Audio Configuration schema.</p> <code>BatDetect2_ConfigSchema</code> <p>BatDetect2 Program Configuration schema.</p> <code>ModelConfig</code> <p>Model output configuration.</p> <code>SaveRecordingFilter</code> <p>Saving Filters for audio recordings configuration.</p> <code>SaveRecordingManager</code> <p>Saving configuration for audio recordings.</p> <code>Summariser</code> <p>Summariser configuration.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration-classes","title":"Classes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_AudioConfig","title":"<code>BatDetect2_AudioConfig</code>","text":"<p>               Bases: <code>AudioConfiguration</code></p> <p>Audio Configuration schema.</p> <p>Attributes:</p> Name Type Description <code>schedule_end</code> <code>time</code> <p>End time for recording schedule.</p> <code>schedule_start</code> <code>time</code> <p>Start time for recording schedule.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_AudioConfig-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_AudioConfig.schedule_end","title":"<code>schedule_end: datetime.time = Field(default=datetime.time(hour=7, minute=0, second=0))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>End time for recording schedule.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_AudioConfig.schedule_start","title":"<code>schedule_start: datetime.time = Field(default=datetime.time(hour=19, minute=0, second=0))</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start time for recording schedule.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema","title":"<code>BatDetect2_ConfigSchema</code>","text":"<p>               Bases: <code>DetectionProgramConfiguration</code></p> <p>BatDetect2 Program Configuration schema.</p> <p>This schema extends the acoupi <code>DetectionProgramConfiguration</code> to include settings for the BatDetect2 program, such as custom audio recording, model setup, file management, messaging, and summarisation.</p> <p>Attributes:</p> Name Type Description <code>model</code> <code>ModelConfig</code> <p>Model output configuration.</p> <code>recording</code> <code>BatDetect2_AudioConfig</code> <p>Audio recording configuration.</p> <code>saving_filters</code> <code>Optional[SaveRecordingFilter]</code> <p>Recording Saving Filters configuration for audio recordings.</p> <code>saving_managers</code> <code>SaveRecordingManager</code> <p>Recording Saving Managers configuration for audio recordings.</p> <code>summariser_config</code> <code>Optional[Summariser]</code> <p>Summariser configuration.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema.model","title":"<code>model: ModelConfig = Field(default_factory=ModelConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Model output configuration.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema.recording","title":"<code>recording: BatDetect2_AudioConfig = Field(default_factory=BatDetect2_AudioConfig)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Audio recording configuration.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema.saving_filters","title":"<code>saving_filters: Optional[SaveRecordingFilter] = Field(default_factory=SaveRecordingFilter)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Recording Saving Filters configuration for audio recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema.saving_managers","title":"<code>saving_managers: SaveRecordingManager = Field(default_factory=SaveRecordingManager)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Recording Saving Managers configuration for audio recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.BatDetect2_ConfigSchema.summariser_config","title":"<code>summariser_config: Optional[Summariser] = Field(default_factory=Summariser)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Summariser configuration.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.ModelConfig","title":"<code>ModelConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Model output configuration.</p> <p>Attributes:</p> Name Type Description <code>detection_threshold</code> <code>float</code> <p>Detection threshold for filtering model outputs.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.ModelConfig-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.ModelConfig.detection_threshold","title":"<code>detection_threshold: float = 0.4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Detection threshold for filtering model outputs.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter","title":"<code>SaveRecordingFilter</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Saving Filters for audio recordings configuration.</p> <p>Attributes:</p> Name Type Description <code>after_dawndusk_duration</code> <code>int</code> <p>Optional duration in minutes after dawn/dusk to save recordings.</p> <code>before_dawndusk_duration</code> <code>int</code> <p>Optional duration in minutes before dawn/dusk to save recordings.</p> <code>endtime</code> <code>time</code> <p>End time of the interval for which to save recordings.</p> <code>frequency_duration</code> <code>int</code> <p>Optional duration in minutes to save recordings using the frequency filter.</p> <code>frequency_interval</code> <code>int</code> <p>Optional periodic interval in minutes to save recordings.</p> <code>saving_threshold</code> <code>float</code> <p>Minimum threshold of detections from a recording to save it.</p> <code>starttime</code> <code>time</code> <p>Start time of the interval for which to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.after_dawndusk_duration","title":"<code>after_dawndusk_duration: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional duration in minutes after dawn/dusk to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.before_dawndusk_duration","title":"<code>before_dawndusk_duration: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional duration in minutes before dawn/dusk to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.endtime","title":"<code>endtime: datetime.time = datetime.time(hour=7, minute=0, second=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>End time of the interval for which to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.frequency_duration","title":"<code>frequency_duration: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional duration in minutes to save recordings using the frequency filter.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.frequency_interval","title":"<code>frequency_interval: int = 0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional periodic interval in minutes to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.saving_threshold","title":"<code>saving_threshold: float = 0.3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Minimum threshold of detections from a recording to save it.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingFilter.starttime","title":"<code>starttime: datetime.time = datetime.time(hour=19, minute=0, second=0)</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Start time of the interval for which to save recordings.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager","title":"<code>SaveRecordingManager</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Saving configuration for audio recordings.</p> <p>(path to storage, name of files, saving threshold).</p> <p>Attributes:</p> Name Type Description <code>bat_threshold</code> <code>float</code> <p>Minimum threshold of detections from a recording to save it.</p> <code>false_dir</code> <code>str</code> <p>Directory for saving recordings with uncertain detections.</p> <code>timeformat</code> <code>str</code> <p>Time format for naming the audio recording files.</p> <code>true_dir</code> <code>str</code> <p>Directory for saving recordings with confident detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager.bat_threshold","title":"<code>bat_threshold: float = 0.5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Minimum threshold of detections from a recording to save it.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager.false_dir","title":"<code>false_dir: str = 'no_bats'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directory for saving recordings with uncertain detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager.timeformat","title":"<code>timeformat: str = '%Y%m%d_%H%M%S'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Time format for naming the audio recording files.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.SaveRecordingManager.true_dir","title":"<code>true_dir: str = 'bats'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Directory for saving recordings with confident detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser","title":"<code>Summariser</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Summariser configuration.</p> <p>Attributes:</p> Name Type Description <code>high_band_threshold</code> <code>Optional[float]</code> <p>Optional high band threshold to summarise detections.</p> <code>interval</code> <code>Optional[float]</code> <p>Interval (in seconds) for summarising detections.</p> <code>low_band_threshold</code> <code>Optional[float]</code> <p>Optional low band threshold to summarise detections.</p> <code>mid_band_threshold</code> <code>Optional[float]</code> <p>Optional mid band threshold to summarise detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser-attributes","title":"Attributes","text":""},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser.high_band_threshold","title":"<code>high_band_threshold: Optional[float] = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional high band threshold to summarise detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser.interval","title":"<code>interval: Optional[float] = 3600</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Interval (in seconds) for summarising detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser.low_band_threshold","title":"<code>low_band_threshold: Optional[float] = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional low band threshold to summarise detections.</p>"},{"location":"reference/configuration/#acoupi_batdetect2.configuration.Summariser.mid_band_threshold","title":"<code>mid_band_threshold: Optional[float] = 0.0</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Optional mid band threshold to summarise detections.</p>"},{"location":"reference/model/","title":"Model","text":""},{"location":"reference/model/#model","title":"Model","text":""},{"location":"reference/model/#batdetect2_model","title":"BatDetect2 Model","text":""},{"location":"reference/model/#acoupi_batdetect2.model","title":"<code>acoupi_batdetect2.model</code>","text":"<p>Acoupi detection and classification Models.</p> <p>Classes:</p> Name Description <code>BatDetect2</code> <p>BatDetect2 Model to analyse the audio recording.</p>"},{"location":"reference/model/#acoupi_batdetect2.model-classes","title":"Classes","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2","title":"<code>BatDetect2()</code>","text":"<p>               Bases: <code>Model</code></p> <p>BatDetect2 Model to analyse the audio recording.</p> <p>This model uses the BatDetect2 library to detect bat calls in audio recordings and classify them into one of the 18 UK bat species.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the model, by default \"BatDetect2\".</p> <p>Methods:</p> Name Description <code>load_api</code> <code>run</code> <p>Run the model on the recording.</p> <p>Attributes:</p> Name Type Description <code>api</code> <code>name</code> <code>str</code>"},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2-attributes","title":"Attributes","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2.api","title":"<code>api</code>  <code>property</code>","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2.name","title":"<code>name: str = 'BatDetect2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2-functions","title":"Functions","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2.load_api","title":"<code>load_api()</code>","text":""},{"location":"reference/model/#acoupi_batdetect2.model.BatDetect2.run","title":"<code>run(recording)</code>","text":"<p>Run the model on the recording.</p> <p>Parameters:</p> Name Type Description Default <code>recording</code> <code>Recording</code> <p>The audio recording to process.</p> required <p>Returns:</p> Type Description <code>ModelOutput</code> <p>The model output containing the detections.</p>"},{"location":"reference/program/","title":"Program","text":""},{"location":"reference/program/#program","title":"Program","text":""},{"location":"reference/program/#pre-built_program","title":"Pre-Built Program","text":""},{"location":"reference/program/#acoupi_batdetect2.program","title":"<code>acoupi_batdetect2.program</code>","text":""},{"location":"reference/program/#acoupi_batdetect2.program--batdetect2_program","title":"Batdetect2 Program.","text":"<p>This module builds the BatDetect2 Program to record, detect and classify, as well as manage and send messages of UK bat calls. The program extends the <code>DetectionProgram</code> and <code>MessagingProgram</code> from the acoupi package by adding the BatDetect2 model and integrating users' custom configuration schema.</p>"},{"location":"reference/program/#acoupi_batdetect2.program--key_elements","title":"Key Elements:","text":"<ul> <li>BatDetect2_ConfigSchema: Defines the configuration for the BatDetect2 program, including the audio recording, model setup, file management, messaging, and summariser settings.</li> </ul>"},{"location":"reference/program/#acoupi_batdetect2.program--program_tasks","title":"Program Tasks:","text":"<ul> <li>recording_task: Records audio from a microphone and saves the audio files in a temporary directory until they have been processed by the <code>detection</code> and <code>management</code> tasks. Based on the <code>SavingFilters</code> configuration, recordings will either saved or deleted.</li> <li>detection_task: Runs the BatDetect2 model on the audio recordings, processes the detections, and can use a custom <code>ModelOutputCleaner</code> to filter out unwanted detections (e.g., low-confidence results). The filtered detections are saved in a <code>metadata.db</code> file.</li> <li>management_task: Performs periodically file management operations, such as moving recording to permanent storage, or deleting unnecessary ones.</li> <li>messaging_task: Send messages stored in the message store using a configured protocol (HTTP or MQTT).</li> <li>summary_task: Periodically creates summaries of the detections.</li> </ul>"},{"location":"reference/program/#acoupi_batdetect2.program--customisation_options","title":"Customisation Options:","text":"<ul> <li> <p>ModelConfig: Set the <code>detection_threshold</code> to clean out the output of the BatDetect2 model. Detections with a confidence score below this threshold will be excluded from the store and from the message content.</p> </li> <li> <p>SaveRecordingManager: Define where recordings are stored, the naming format, and the minimum confidence score for saving recordings. Recordings with confidence scores below the <code>saving_threshold</code> will not be saved. The <code>saving_threshold</code> can be set lower than the <code>detection_threshold</code> to save recordings with uncertain detections. Recordings with detections above the <code>detection_threshold</code> will be saved in the <code>true_dir</code> directory, while recordings with detections below the <code>detection_threshold</code> but above the <code>saving_threshold</code> will be saved in the <code>false_dir</code> directory.</p> </li> <li> <p>SaveRecordingFilter: Define additional saving filters for saving recordings.</p> <ol> <li>A timeinterval interval fitler that saves recordings whthin a specific time  window, set by the <code>starttime</code> and <code>endtime</code> parameters.</li> <li>A frequency filter that saves recordings for a specific duration  (in minutes) at defined interval (in minutes), set by the <code>frequency_duration</code>  and <code>frequency_interval</code> parameters.</li> <li>A before dawn/dusk filter to save recording for a defined duration  (in minutes) before dawn and dusk, set by the <code>before_dawndusk_duration</code>.</li> <li>An after dawn/dusk filter to save recording for a defined duration  (in minutes) after dawn and dusk, set by the <code>after_dawndusk_duration</code>.</li> <li>A saving threshold filter to save recording with detection above a specific  treshold, set by the <code>saving_filter</code> parameter. </li> </ol> </li> <li> <p>SummariserConfig: Define the interval for summarising detections. By default, the summariser calculates the minimum, maximum, and average confidence scores of the total number of detections for each time interval. If the <code>low_band_threshold</code>, <code>mid_band_threshold</code>, and <code>high_band_threshold</code> are set to values greater than 0.0, it also summarises the number of detections in each band (low, mid, high).</p> </li> </ul> <p>Classes:</p> Name Description <code>BatDetect2_Program</code> <p>BatDetect2 Program Configuration.</p>"},{"location":"reference/program/#acoupi_batdetect2.program-classes","title":"Classes","text":""},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program","title":"<code>BatDetect2_Program</code>","text":"<p>               Bases: <code>DetectionProgram[BatDetect2_ConfigSchema]</code></p> <p>BatDetect2 Program Configuration.</p> <p>Methods:</p> Name Description <code>configure_model</code> <p>Configure the BatDetect2 model.</p> <code>get_file_managers</code> <p>Get the file managers for the BatDetect2 Program.</p> <code>get_message_factories</code> <p>Get the message factories for the BatDetect2 Program.</p> <code>get_recording_filters</code> <p>Get the recording filters for the BatDetect2 Program.</p> <code>get_summarisers</code> <p>Get the summarisers for the BatDetect2 Program.</p> <code>setup</code> <p>Set up the BatDetect2 Program.</p> <p>Attributes:</p> Name Type Description <code>config_schema</code>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program-attributes","title":"Attributes","text":""},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.config_schema","title":"<code>config_schema = BatDetect2_ConfigSchema</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program-functions","title":"Functions","text":""},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.configure_model","title":"<code>configure_model(config)</code>","text":"<p>Configure the BatDetect2 model.</p> <p>Returns:</p> Type Description <code>BatDetect2</code> <p>The BatDetect2 model instance.</p>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.get_file_managers","title":"<code>get_file_managers(config)</code>","text":"<p>Get the file managers for the BatDetect2 Program.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>BatDetect2_ConfigSchema</code> <p>The configuration schema for the acoupi_batdetect2 program defined in the configuration.py file and configured by a user via the CLI.</p> required <p>Returns:</p> Type Description <code>list[RecordingSavingManager]</code> <p>A list of file managers for the batdetect2 program.</p>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.get_message_factories","title":"<code>get_message_factories(config)</code>","text":"<p>Get the message factories for the BatDetect2 Program.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>BatDetect2_ConfigSchema</code> <p>The configuration schema for the acoupi_batdetect2 program defined in the configuration.py file and configured by a user via the CLI.</p> required <p>Returns:</p> Type Description <code>list[MessageBuilder]</code> <p>A list of message factories for the batdetect2 program. By default, the message factory will use the <code>detection_threshold</code> parameter for buildling messages.</p>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.get_recording_filters","title":"<code>get_recording_filters(config)</code>","text":"<p>Get the recording filters for the BatDetect2 Program.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>BatDetect2_ConfigSchema</code> <p>The configuration schema for the acoupi_batdetect2 program defined in the configuration.py file and configured by a user via the CLI.</p> required <p>Returns:</p> Type Description <code>list[RecordingSavingFilter]</code> <p>A list of recording filters for the batdetect2 program. If no saving filters are defined, the method will not save any recordings.</p>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.get_summarisers","title":"<code>get_summarisers(config)</code>","text":"<p>Get the summarisers for the BatDetect2 Program.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>BatDetect2_ConfigSchema</code> <p>The configuration schema for the acoupi_batdetect2 program defined in the configuration.py file and configured by a user via the CLI.</p> required <p>Returns:</p> Type Description <code>list[Summariser]</code> <p>A list of summarisers for the batdetect2 program. By default, the summariser will use the <code>summariser_config.interval</code> parameter for summarising the detections and calculating the minimum, maximum, and average confidence scores of the detections in each interval.</p>"},{"location":"reference/program/#acoupi_batdetect2.program.BatDetect2_Program.setup","title":"<code>setup(config)</code>","text":"<p>Set up the BatDetect2 Program.</p> <p>This method initialises the batdetect2 program, registers the recording, detection, management, messaging, and summariser tasks, and performs any necessary setup for the program to run.</p>"},{"location":"tutorials/","title":"Tutorials","text":""},{"location":"tutorials/#tutorials","title":"Tutorials","text":"<p>This section of the documentation contains step-by-step tutorials to help you getting started with acoupi_batdetect2. The tutorials aim to outline what acoupi_batdetect2 is capable of while providing specific information such as installing, configuring, and deploying the acoupi_batdetect2 program.</p> <p>We hope the tutorials are broadly accessible to anyone with an interest in using acoupi_batdetect2.</p> Tutorials Step-by-Step Information Installation Learn how to install acoupi_batdetect2 Configuration Learn about the configuration options for acoupi_batdetect2 program. Deployment Learn how to start, stop and get the status of acoupi_batdetect2 program. <p>acoupi_batdetect2 Reference</p> <p>Take a look at the Reference section of the documentation to learn more about the code supporting acoupi_batdetect2.</p> <p>Contribution</p> <p>We are interested to expand the number of tutorials so users can gain more detailed information about specific elements of acoupi_batdetect2. If you feel we should do a tutorial about \"XYZ\", please reach out!</p>"},{"location":"tutorials/configuration/","title":"Configuration","text":""},{"location":"tutorials/configuration/#configuration","title":"Configuration","text":"<p>Once acoupi_batdetect2 has been installed on a device, users can configure it. This setup determines how the device records audio, classifies it, and sends information over a network.</p> <p>To accept the default settings, press the keyboard letter <code>y</code> or the key <code>Enter</code>.  To reject and modify a setting, press the keyboard letter <code>n</code> and input a new value when prompted.</p> <p>The video shows the configuration process for the acoupi_batdetect2 program via the CLI.</p> <p></p>"},{"location":"tutorials/configuration/#configuration_parameters","title":"Configuration Parameters","text":"<p>The following is an example of how an acoupi_batdetect2 program can be configured, shown in JSON format.</p> <p>In this setup, the device records audio in 3 second clips every 12 seconds, from 7pm to 7am. However, the device only saves recordings between 9pm (<code>saving_filters.starttime</code>) and 11pm  (<code>saving_filters.endttime</code>). Several parameters control how and when recordings are saved. </p> <ul> <li><code>saving_managers.true_dir</code> and <code>saving_managers.false_dir</code> specify the folders where recordings are saved. These paramenters are complementary to the <code>paths.recordings</code> parameter. Recordings with \"true\" detections (i.e., where the detection confidence score is greater or equal to the <code>model.detection_threshold</code> parameter) are saved in the <code>true_dir</code> folder, while those with \"false\" detections (i.e., where the confidence score is lower than the <code>model.detection_threshold</code> but higher than the <code>saving_managers.bat_threshold</code>) are saved in the <code>false_dir</code> folder. This aims at helping capturing possible false negatives.</li> <li><code>saving_managers.timeformat</code> determines the naming format for saved recordings. The timestamp in the filename reflects the starting time of a recording (i.e., the exact time the recording started).</li> </ul> <p>Detections made by the BatDetect2 model are transmitted to a remote server using the MQTT communication protocol. The following parameters manage how and where this information is sent. </p> <ul> <li><code>mqtt.host</code> and <code>mqtt.topic</code> specify the destination (i.e., the server address and the topic) to which messages are sent. Messages contain information about the recording file, and the detection and classification found in the file. </li> <li><code>messaging.messages_db</code> sets the location of the local database on the device. This database stores outgoing messages and tracks their status - whether they are waiting to be sent, have been sent successfully or failed. </li> <li><code>messaging.message_send_interval</code> controls how often the system checks for new messages to be sent. This interval can be reduced for near real-time updates, or lengthen to minutes or even hours if network connectivity is limited. </li> </ul> <p>CLI Output: acoupi config get</p> <pre><code>{\n    \"timezone\": \"Europe/London\",\n    \"microphone\": {\n        \"device_name\": \"UltraMic 250K 16 bit r4\",\n        \"samplerate\": 250000,\n        \"audio_channels\": 1\n    },\n    \"recording\": {\n        \"duration\": 3,\n        \"interval\": 10,\n        \"chunksize\": 8192,\n        \"schedule_start\": \"19:00:00\",\n        \"schedule_end\": \"07:00:00\"\n    },\n    \"paths\": {\n        \"tmp_audio\": \"/run/shm\",\n        \"recordings\": \"/home/pi/storages/recordings\",\n        \"db_metadata\": \"/home/pi/storages/metadata.db\"\n    },\n    \"messaging\": {\n        \"messages_db\": \"/home/pi/storages/messages.db\",\n        \"message_send_interval\": 120,\n        \"heartbeat_interval\": 3600,\n        \"http\": null,\n        \"mqtt\": {\n            \"host\": \"your-mqtt-broker.org\",\n            \"username\": \"mqtt_username\",\n            \"password\": \"mqtt_password\",\n            \"topic\": \"mytopic/acoupi\",\n            \"port\": 1884,\n            \"timeout\": 5\n        }\n    },\n    \"model\": {\n        \"detection_threshold\": 0.4\n    },\n    \"saving_filters\": {\n      \"starttime\": \"21:00:00\",\n      \"endtime\": \"23:00:00\",\n      \"before_dawndusk_duration\": 0,\n      \"after_dawndusk_duration\": 0,\n      \"frequency_duration\": 0,\n      \"frequency_interval\": 0\n      \"saving_threshold\": '0.3,\n    },\n    \"saving_managers\": {\n      \"true_dir\": \"bats\",\n      \"false_dir\": \"no_bats\",\n      \"timeformat\": \"%Y%m%d_%H%M%S\",\n      \"bat_threshold\": 0.5,\n    },\n    \"summariser_config\": {\n      \"interval\": 3600.0,\n      \"low_band_threshold\": 0.0,\n      \"mid_band_threshold\": 0.0,\n      \"high_band_threshold\": 0.0\n    }\n}\n</code></pre> <p>How to define the <code>detection_threhold</code> value?</p> <p>The <code>detection_threshold</code> selects detections based on their confidence scores. Detections below this value will be disregarded, while those above or equal to this threshold will be saved. </p> <p>The confidence score obtained from running the BatDetect2 model on your audio recordings depends on the model's prediction accuracy and recall, as  well as factors like your audio recording device,  recorder location, and environmenal conditions. </p> <p>We recommend familiarising yourself with the BatDetect2 model's precision and recall values for each of the UK bat species. Refer to the  publication by Mac Aodha O., et al., (2002) Towards a General Approach for Bat Echolocation Detection and Classification for more details. </p> How to modify a value after setup? <p>You can modify a parameter's value after the acoupi_batdetect2 program has been set up. This can be necessary due to a misconfiguration or to make changes to the current program. To modify a parameter, use the command:</p> <p>CLI Command: modify a configuration parameter after setup</p> <pre><code>acoupi config set --field &lt;parameter_name&gt; &lt;new_value&gt;\n</code></pre> <p>Replace the <code>parameter_name</code> with the full name of the parameter to modified. For example, to update the recording saving filters start time to 7pm, the CLI command would be as follow:</p> <p>CLI Command: modify recording_saving filter start time</p> <pre><code>acoupi config set --field recording_saving.filters.starttime 19:00:00\n</code></pre> <p>The table below provides detailed information about the parameters available when setting up acoupi_batdetect2 program.</p> Parameter Type Default Value Definition Comment Microphone Microphone configuration. <code>microphone.device_name</code> str - The name of the microphone to use for recording. Ensure it matches the device in use. <code>microphone.samplerate</code> int (Hz) - Sampling rate of the microphone in Hz. Set the sampling rate according to the microphone's specifications, however keep in mind that <code>batdetect2</code> natively processes recordings at 256 kHz and resamples all non-matching recordings. <code>microphone.audio_channels</code> int - Number of audio channels (i.e., 1 for mono). Configure according to the microphone's capabilities, however keep in mind that <code>batdetect2</code> only uses the first audio channel. Recording Configuration regarding the recording process. <code>recording.duration</code> int (sec.) 3 Duration in seconds for each audio recording. The <code>batdetect2</code> model is able to process recordings of variable duration, however processing long recordings might lead to failure due to increased memory usage. Keep the duration between 1 and 3 seconds for optimal performance. <code>recording.interval</code> int (sec.) 10 Interval in seconds between recordings. The <code>batdetect2</code> model requires some processing time. This interval helps maintain good performance. <code>recording.chunksize</code> int 8192 Chunksize of the audio recording. An error will occur if the chunksize is too small for the audio device. <code>schedule_start</code> time (HH:MM:SS) 19:00:00 Time of day when recordings will start (24-hour format). Adjust according to specific monitoring needs (e.g., nightime hours). <code>schedule_end</code> time (HH:MM:SS) 07:00:00 Time of day when recordings will end (24-hour format). Adjust according to specific monitoring needs (e.g., nightime hours). <code>timezone</code> string \"Europe/London\" Timezone of the sensor location. Configure this according to your deployment region. Paths Configuration for file paths. <code>paths.tmp_audio</code> string \"/run/shm\" Temporary storage path for audio recordings. Temporary in-memory path. Do not modify. <code>paths.recordings</code> string \"/home/pi/storages/recordings\" Path to directory for permanent storing of recorded audio files. Modify accordingly. With default paths, recordings are stored on the SDCard, modify if using external usb hardrive. <code>paths.db_metadata</code> string \"/home/pi/storages/metadata.db\" Path to the database file for storing the metadata. This database keeps track of recorded files, ML detection results, and system information. Messaging (Optional) Configuration for sending messages to remote server. Will require access to network connectivity at the location of your device deployment. <code>messaging.messages_db</code> str \"/home/pi/storages/messages.db\" Path to the database file for storing messages. This database keeps track of the messages to be sent to a remote server and their sent/received status. <code>messaging.message_send_interval</code> int (sec.) 120 Interval in seconds between attempts to send messages to a remote server. Adjust for network performance and data bandwidth. <code>messaging.heartbeat_interval</code> int (sec.) 3600 Interval in seconds for sending heartbeat messages to the server. Heartbeat message provides information about the device status (i.e., the correct functioning of the device). Messaging HTTP (Optional) Configuration for sending messages via HTTP. <code>messaging.http.base_url</code> str - URL of the HTTP server to which messages are sent. Configure according to your server setup. <code>messaging.http.content_type</code> str application/json Content type of the HTTP messages. Messages to be sent are formated into a <code>json</code> object. <code>messaging.http.timeout</code> int (sec) - Timeout for HTTP requests in seconds. Messaging MQTT (Optional) Configuration for sending messages via MQTT. <code>messaging.mqtt.host</code> string - MQTT server hostname for message transmission. Configure according to your server setup. <code>messaging.mqtt.username</code> str - Username for authentication with the MQTT broker. Replace with your server username. <code>messaging.mqtt.password</code> str - Password for authentication with the MQTT broker. Replace with your server password. <code>messaging.mqtt.topic</code> str \"acoupi\" Topic on the MQTT broker to publish messages Replace with your server setup. <code>messaging.mqtt.port</code> int 1884 Port number of the MQTT broker. Default port is usually fine unless other setup on your server. <code>messaging.mqtt.timeout</code> int (sec) 5 Timeout for connecting to the MQTT broker in seconds. Model Configuration related to running the BatDetect2 model. <code>model.detection_threshold</code> float 0.4 Defines the threshold for filtering the detections obtained by the model. A float value between 0.01 and 0.99. Recording Saving Filters (Optional) N/A - Additional configurations for filtering the recordings to save. <code>saving_filters.starttime</code> time (HH:MM:SS) \"21:00:00\" Start time for saving recorded audio files (24-hour format). Insert 00:00:00 to not use this parameter to save audio recordings. <code>saving_filters.endtime</code> time (HH:MM:SS) \"23:00:00\" End time for saving recorded audio files (24-hour format) Insert 00:00:00 to not use this parameter to save audio recordings. <code>saving_filters.before_dawndusk_duration</code> int (min.) 0 Additional duration (in minutes) to save recordings before the dawn/dusk time. Ensure recording interval covers the dawn and dusk time if using this parameter. <code>saving_filters.after_dawndusk_duration</code> int (min.) 0 Additional duration (in minutes) to save recordings after the dawn/dusk time. Ensure recording interval covers the dawn and dusk time if using this parameter. <code>saving_filters.frequency_duration</code> int (min.) 0 Duration in minutes for storing recordings when using the frequency filter. Set to zero if not using this parameter. <code>saving_filters.frequency_interval</code> int (min.) 0 Periodic interval in minutes between two periods of storing recordings. Set to zero if not using this parameter. <code>saving_filters.saving_threshold</code> float 0.2 Defines the threshold for saving files containing detections. A float value between 0.01 and 0.99. Recording Saving Managers (Optional) Additional configurations for managing recordings processed by the model. <code>saving_managers.true_dir</code> str \"bats\" Path to the directory storing audio files with confident detections (i.e., recordings with detection score greater or equal than the <code>detection_threshold</code>). Folder located in the folder defined by the <code>path.recordings</code> parameter. <code>saving_managers.false_dir</code> str \"no_bats\" Path to the directory storing audio files with non-confident detections (i.e., recordings with detection score smaller than the <code>detection_threshold</code>). Folder located in the folder defined by the <code>path.recordings</code> parameter. <code>saving_managers.timeformat</code> str \"%Y%m%d_%H%M%S\" Defines how to name recording files. The default value capture the date and time when the recording stated. A recording with name 20241004_183040.wav indicates that the recording started on October 4, 2024 at 18:30:40. <code>saving_managers.bat_threshold</code> float 0.5 Defines the threshold for saving files in folders based on confident and non-confident detections. A float value between 0.01 and 0.99. Summariser (Optional) Configuration for creating summary messages of the detections. <code>summariser.interval</code> float 3600 Interval for which detections will be summarised. In minutes. <code>summariser.low_band_threshold</code> float 0.0 Count the number of bat calls for each species that have a classification score lower or equal to the threshold. A float value between 0.01 and 0.99 <code>summariser.mid_band_threshold</code> float 0.0 Count the number of bat calls for each species that have a classification score lower or equal to the mid_band value but higher than the low_band value. A float value between 0.01 and 0.99 <code>summariser.high_band_threshold</code> float 0.0 Count the number of bat calls for each species that have a classification score lower or equal to the high_band value but higher than the high_band value. A float value between 0.01 and 0.99"},{"location":"tutorials/deployment/","title":"Deployment","text":""},{"location":"tutorials/deployment/#deployment","title":"Deployment","text":"<p>After installing and configuring an acoupi_batdetect2 program, users can proceed to deploy it. This means the device will start running the program, ensuring audio recordings happen according to the configured recording schedule, recorded files will be saved or deleted, and if http or mqtt messaging were configured, messages will be sent to a remote server. </p> What happens when a deployment starts? <p>When starting the deployment of a program, the following happen:</p> <ul> <li>Create Storages: This step checks that the folders and database files to store recordings and metadata exist. If using the default program configuration, a <code>storages/</code> folder will be created in the home directory (i.e., <code>home/pi/</code>), containing a <code>metadata.db</code> file and a <code>recordings/</code> folder to store the <code>.wav</code> audio files. </li> <li>Schedule Tasks: This step creates special instructions called systemd unit files to ensure that the program runs automatically in the background. This means the program will keep running even when the terminal window is closed or the device restarts after power interruption.</li> </ul> How are deployments managed? <p>For more details about the system background processes and the management of a deployment, refer to the Explanation: System section of the acoupi documentation.</p>"},{"location":"tutorials/deployment/#managing_the_deployment_of_acoupi_batdetect2_via_the_cli","title":"Managing the deployment of acoupi_batdetect2 via the CLI","text":"<p>The video shows how a user can start, stop, and get the status of acoupi_batdetect2.</p> <p></p>"},{"location":"tutorials/deployment/#before_starting_a_deployment","title":"Before starting a deployment","text":"<p>Before starting a deployment, it's important to run a health check to ensure there are no errors in the program configuration. If everything is in order, a green message saying <code>Health checks passed</code> will be printed. However, if there are any errors, the system will display specific error messages. To resolve them, modify the configurations settings according to the provided error messages. </p> <p>CLI Command: pre-deployment checks</p> <pre><code>acoupi check\n</code></pre>"},{"location":"tutorials/deployment/#starting_a_deployment","title":"Starting a deployment","text":"<p>When ready to start a program, use the <code>acoupi deployment start</code> command. This will prompt you to provide some additional information; a name for the deployment and the latitude and longitude coordinates of the device\u2019s location. This data will be saved in the <code>metadata.db</code> file along with the start date and time of the deployment.</p> <p>CLI Command: activating an acoupi program</p> <pre><code>acoupi deployment start\n</code></pre> Table: Additional parameters when starting a deployment Deployment Parameter Type Value Definition <code>name</code> string - Name for the specific deployment. <code>latitude</code> float - The latitude coordinate of the device location when   deployed. <code>longitude</code> float - The longitude coordinate of the device location when  deployed."},{"location":"tutorials/deployment/#getting_the_status_of_a_deployment","title":"Getting the status of a deployment","text":"<p>After starting a deployment, it\u2019s good practice to check the status of the program by running the <code>acoupi deployment status</code> command. This command provides a status report for system services, Celery workers, the program, and the overall deployment.</p> <p>CLI Command: viewing the status of acoupi_batdetect2</p> <pre><code>acoupi deployment status\n</code></pre>"},{"location":"tutorials/deployment/#stopping_a_deployment","title":"Stopping a deployment","text":"<p>Stopping the deployment can be necessary if you need to modify the program\u2019s configuration, move the device to a different location, or fix any errors that have appeared in the logs. To halt the program, use the <code>acoupi deployment stop</code> command. Remember, once a deployment is stopped, it can only be restarted by running the acoupi deployment start command again.</p> <p>CLI Command: halting deployment of acoupi_batdetect2</p> <pre><code>acoupi deployment stop\n</code></pre>"},{"location":"tutorials/deployment/#understanding_acoupi_batdetect2_status","title":"Understanding acoupi_batdetect2 status","text":"<ul> <li> <p>System Services: Refer to the background processes that keep your acoupi installation running. These are the core services that manage the overall execution of the program and heartbeat monitoring. Two critical files handle these: the <code>acoupi.service</code> responsible for starting and stopping the program and the <code>acoupi-beat.service</code> that ensure the system's health at regular interval (hearbeats).</p> <ul> <li><code>status: inactive</code>: the system services are not running. This happen when the program has not been deployed.</li> <li><code>status: active</code>: the system services are running normally.</li> <li><code>status: failed</code>: an error has occured, and the services have stopped. The error message will provide information about the error.</li> </ul> </li> <li> <p>Celery: Celery is the task manager that coordinates the execution of background jobs, indlucing tasks like audio recording and file management. By default, acoupi uses two workers: the <code>recording</code> worker manages audio recording tasks, the <code>default</code> worker handles any other tasks.  </p> <ul> <li><code>status: unavailable</code>: Celery hasn't started or has stopped. The program isn't processing tasks. </li> <li><code>status: available</code> and <code>workers: ok</code> : Celery is up and running, with workers active and processing tasks normally. </li> <li><code>status: available</code> and <code>workers: notok</code> : Celery is up and running, but one or both workers are encountering problems or is not available. Check the log to identify the issue. </li> </ul> </li> <li> <p>Program: Refer to the configuration and execution of the acoupi program. </p> <ul> <li><code>status: ok</code> : the program has been configured correctly, and no issues have been detected. </li> <li><code>status: unhealthy</code> : there is an issue with the configuration of the program. This suggests that you might need to review the program's configuration setup.  </li> </ul> </li> <li> <p>Deployment: Refer to the overall state of your active acoupi instance, indicating whether everything is currently running as expected.</p> <ul> <li><code>status: active</code>: the deployment is running successfuly, the program is active and tasks are being executed.</li> <li><code>status: inactive</code>: the deployment has stopped or hasn't been started.</li> </ul> </li> </ul>"},{"location":"tutorials/installation/","title":"Installation","text":""},{"location":"tutorials/installation/#installation","title":"Installation","text":"<p>acoupi_batdetect2 has been designed to run on single-board computer devices like the Raspberry\u00a0Pi (RPi). Users should be able to download and test acoupi_batdetect2 on any Linux-based machine with acoupi software and Python version &gt;=3.8,&lt;3.12 installed.</p>"},{"location":"tutorials/installation/#installation_requirements","title":"Installation Requirements","text":"<p>We recommend the following hardware elements to install and run acoupi_batdetect2.</p> <ul> <li>A Linux-based single-board computer such as the Raspberry Pi 4B.</li> <li>A SD Card with 64-bit Lite OS version installed.</li> <li>A USB ultrasonic Microphone such as an AudioMoth\u00a0USB\u00a0Microphone or an Ultramic 192K/250K.</li> </ul> Recommended Hardware <p>The software has been extensively developed and tested with the RPi 4B. We advise users to select the RPi 4B or a device featuring similar or higher specifications.</p>"},{"location":"tutorials/installation/#installation_steps","title":"Installation Steps","text":"Getting started with Raspberry Pi <p>If you are new to RPi, we recommend you reading and following the RPi's Getting started documentation.</p> <p>To install and use acoupi_batdetect2 on your embedded device follow these steps:</p> <p>Step 1: Install acoupi and its dependencies.</p> <p>CLI Command: install acoupi</p> <pre><code>curl -sSL https://github.com/acoupi/acoupi/raw/main/scripts/setup.sh | bash\n</code></pre> <p>Step 2: Install acoupi_batdetect2.</p> <p>CLI Command: install acoupi_batdetect2</p> <pre><code>pip install acoupi_batdetect2\n</code></pre> <p>Step 3: Configure the acoupi_batdetect2 program.</p> <p>acoupi_batdetect2 program includes multiple components for recording, processing, saving and deleting audio files, as well as sending detections and summary messages to a remote server. Enter the following command to configure the program according to your needs.</p> <p>CLI Command: configure acoupi_batdetect program</p> <pre><code>acoupi setup --program acoupi_batdetect2.program\n</code></pre> <p>Step 4: To start a deployment of acoupi_batdetect2, run the command:</p> <p>CLI Command: start the configured acoupi_batdetect program</p> <pre><code>acoupi deployment start\n</code></pre>"}]}